NAME	=	libftprintf.a
CFLAGS	=	-Wall -Wextra -Werror
SRCS	=	ft_printf.c \
			utils_ft_printf.c
OBJS	=	$(SRCS:.c=.o)

$(NAME):	$(OBJS)
	ar rcs $@ $^

all: $(NAME)

clean:
	rm -f $(OBJS)

fclean: clean
	rm -f $(NAME)

re:	fclean $(NAME)

.PHONY:	all clean fclean re




#include "ft_printf.h"

static void	print_fmt(va_list *ap, const char *fmt, int *len, char *s_ap)
{
	if (*fmt == '%')
		my_putchar_and_increment('%', 1, len);
	else if (*fmt == 'c')
		my_putchar_and_increment(va_arg(*ap, int), 1, len);
	else if (*fmt == 's')
	{
		s_ap = va_arg(*ap, char *);
		if (!s_ap)
			my_putstr_and_increment("(null)", 1, len);
		else
			my_putstr_and_increment(s_ap, 1, len);
	}
	else if (*fmt == 'd' || *fmt == 'i')
		my_putnbr_and_increment(va_arg(*ap, int), 1, len);
	else if (*fmt == 'u')
		my_putnbr_and_increment(va_arg(*ap, unsigned int), 1, len);
	else if (*fmt == 'x')
		put_base16(va_arg(*ap, unsigned int), "0123456789abcdef", len);
	else if (*fmt == 'X')
		put_base16(va_arg(*ap, unsigned int), "0123456789ABCDEF", len);
	else if (*fmt == 'p')
	{
		my_putstr_and_increment("0x", 1, len);
		put_address(va_arg(*ap, unsigned long long), "0123456789abcdef", len);
	}
}

int	ft_printf(const char *fmt, ...)
{
	va_list	ap;
	int		res_len;
	char	*fmt_s_ap;

	va_start(ap, fmt);
	res_len = 0;
	fmt_s_ap = NULL;
	while (*fmt)
	{
		if (*fmt == '%')
		{
			fmt++;
			print_fmt(&ap, fmt, &res_len, fmt_s_ap);
		}
		else
		{
			my_putchar_and_increment(*fmt, 1, &res_len);
		}
		fmt++;
	}
	va_end(ap);
	return (res_len);
}


#ifndef FT_PRINTF_H
# define FT_PRINTF_H

# include <stdarg.h>
# include <unistd.h>

int		ft_printf(const char *fmt, ...);
void	my_putnbr_and_increment(long long n, int fd, int *res_len);
void	my_putstr_and_increment(char *s, int fd, int *res_len);
void	put_address(unsigned long long n, char *base_16, int *res_len);
void	my_putchar_and_increment(char c, int fd, int *res_len);
void	put_base16(long long n, char *base_16, int *res_len);

#endif


#include "ft_printf.h"

void	my_putchar_and_increment(char c, int fd, int *res_len)
{
	write(fd, &c, 1);
	*res_len = *res_len + 1;
}

void	put_address(unsigned long long n, char *base_16, int *res_len)
{
	unsigned long long	base_16_digit;

	base_16_digit = 16;
	if (n < base_16_digit)
		my_putchar_and_increment(base_16[n], 1, res_len);
	else
	{
		put_address(n / base_16_digit, base_16, res_len);
		put_address(n % base_16_digit, base_16, res_len);
	}
}

void	put_base16(long long n, char *base_16, int *res_len)
{
	long long	base_16_digit;

	base_16_digit = 16;
	if (n < base_16_digit)
		my_putchar_and_increment(base_16[n], 1, res_len);
	else
	{
		put_base16(n / base_16_digit, base_16, res_len);
		put_base16(n % base_16_digit, base_16, res_len);
	}
}

void	my_putnbr_and_increment(long long n, int fd, int *res_len)
{
	long long	long_n;

	long_n = n;
	if (long_n < 0)
	{
		my_putchar_and_increment('-', fd, res_len);
		long_n *= -1;
	}
	if (long_n < 10)
		my_putchar_and_increment(long_n + '0', fd, res_len);
	else
	{
		my_putnbr_and_increment(long_n / 10, fd, res_len);
		my_putnbr_and_increment(long_n % 10, fd, res_len);
	}
}

void	my_putstr_and_increment(char *s, int fd, int *res_len)
{
	int	i;

	i = 0;
	while (s[i] != '\0')
	{
		my_putchar_and_increment(s[i], fd, res_len);
		i++;
	}
}


